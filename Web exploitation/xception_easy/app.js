const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const bodyParser = require('body-parser');
const path = require('path');
const dotenv = require('dotenv');

// Load environment variables from .env file
dotenv.config();

const app = express();
const db = new sqlite3.Database(':memory:');

app.use(bodyParser.urlencoded({ extended: true }));
app.set('view engine', 'ejs');
app.use(express.static(path.join(__dirname, 'public')));

// Create the users table and insert some default users
db.serialize(() => {
    db.run(`CREATE TABLE users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE,
        password TEXT
    )`);

    // Insert some dummy users
    db.run(`INSERT INTO users (username, password) VALUES ('admin', 'supersecret')`);
    db.run(`INSERT INTO users (username, password) VALUES ('user1', 'password1')`);
    db.run(`INSERT INTO users (username, password) VALUES ('user2', 'password2')`);
    db.run(`INSERT INTO users (username, password) VALUES ('user3', 'password3')`);
});

// Render the homepage
app.get('/', (req, res) => {
    res.render('home');
});

// Render the login page
app.get('/login', (req, res) => {
    res.render('login',{message:""});
});

// Handle login
app.post('/login', (req, res) => {
    const username = req.body.username;
    const password = req.body.password;

    // Vulnerable SQL Query
    const query = `SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`;

    db.get(query, (err, row) => {
        if (err) {
            res.status(500).send('Internal Server Error');
        } else if (row) {
            if (username.includes('admin')) {
                // Handle admin login
                const flag = process.env.FLAG || 'FLAG{DEFAULT_FLAG}';
                res.render('admin-dashboard', {
                    totalUsers: 10, // Example data
                    recentActivities: "No recent activities", // Example data
                    flag: flag // This will be commented out in the template
                });
            } else {
                // Handle regular user login
                res.render('dashboard', {
                    username: username
                });
            }
        } else {
            res.render('login', {
                message: 'Invalid username or password'
            });
        }
    });
});

// Render the registration page
app.get('/register', (req, res) => {
    res.render('register',{message:""});
});

// Handle registration
app.post('/register', (req, res) => {
    const username = req.body.username;
    const password = req.body.password;

    db.run(`INSERT INTO users (username, password) VALUES (?, ?)`, [username, password], function (err) {
        if (err) {
            res.render('register', {
                message: 'Username already exists or invalid input'
            });
        } else {
            res.redirect('/login');
        }
    });
});

// Handle logout
app.get('/logout', (req, res) => {
    res.redirect('/');
});

app.get("*", (req, res) => {
    res.status(404).render('404');
});

// Start the server
const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
