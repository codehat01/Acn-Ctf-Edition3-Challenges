const express = require('express');
const mysql = require('mysql2');
const bcrypt = require('bcryptjs');
const session = require('express-session');
const { v4: uuidv4 } = require('uuid');
const { faker } = require('@faker-js/faker');
require('dotenv').config();

const app = express();
const PORT = 3000;
const DATABASE_NAME = 'people_directory';

// Set EJS as the templating engine
app.set('view engine', 'ejs');
app.use(express.static('public'));  // To serve static files like CSS
app.use(express.json());

const generateRandomPerson = () => {
    return {
        unique_id: uuidv4(),
        first_name: faker.name.firstName(),
        last_name: faker.name.lastName(),
        dob: faker.date.past(50, new Date(2002, 0, 1)),
        email: faker.internet.email(),
        phone: faker.phone.number({ style: 'international' }),
        image_url: faker.image.avatarGitHub()
    };
};


// Create MySQL connection without specifying the database
const db = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: process.env.MYSQL_PASSWORD,
});

// Connect to MySQL
db.connect(err => {
    if (err) {
        console.error('Could not connect to the database server:', err);
        process.exit(1);
    }
    console.log('Connected to MySQL server');

    db.query(`CREATE DATABASE IF NOT EXISTS ${DATABASE_NAME}`, (err) => {
        if (err) {
            console.error('Error creating database:', err);
            process.exit(1);
        }
        console.log(`Database '${DATABASE_NAME}' is ready`);

        db.changeUser({ database: DATABASE_NAME }, (err) => {
            if (err) {
                console.error('Error switching to the database:', err);
                process.exit(1);
            }
            console.log(`Switched to the '${DATABASE_NAME}' database`);

            const createUsersTable = `
                CREATE TABLE IF NOT EXISTS users (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    username VARCHAR(255) NOT NULL UNIQUE,
                    password VARCHAR(255) NOT NULL,
                    reset_token VARCHAR(255) DEFAULT NULL
                );
            `;
            db.query(createUsersTable, (err) => {
                if (err) {
                    console.error('Error creating users table:', err);
                    process.exit(1);
                }
                console.log("Table 'users' is ready");
            });

            const createTableQuery = `
                CREATE TABLE IF NOT EXISTS people (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    unique_id VARCHAR(36) NOT NULL,
                    first_name VARCHAR(255) NOT NULL,
                    last_name VARCHAR(255) NOT NULL,
                    dob DATE NOT NULL,
                    email VARCHAR(255) NOT NULL,
                    phone VARCHAR(50) NOT NULL,
                    image_url VARCHAR(255) NOT NULL
                )
            `;
            db.query(createTableQuery, (err) => {
                if (err) {
                    console.error('Error creating table:', err);
                    process.exit(1);
                }
                console.log("Table 'people' is ready");
            });


            db.query('SELECT COUNT(*) AS count FROM people', (err, results) => {
                if (err) throw err;

                if (results[0].count === 0) {
                    for (let i = 0; i < 10; i++) {
                        const person = generateRandomPerson();
                        const sql = 'INSERT INTO people (unique_id, first_name, last_name, dob, email, phone, image_url) VALUES (?, ?, ?, ?, ?, ?, ?)';
                        const values = [person.unique_id, person.first_name, person.last_name, person.dob, person.email, person.phone, person.image_url];

                        db.query(sql, values, (err) => {
                            if (err) throw err;
                            console.log(`Inserted ${person.first_name} ${person.last_name} into the database`);
                        });
                    }
                }
            });
        });
    });
});

// Middleware to parse URL-encoded bodies and sessions
app.use(express.urlencoded({ extended: true }));
app.use(session({
    secret: process.env.SECURITY_KEY, // Use a strong secret key in production
    resave: false,
    saveUninitialized: true
}));

// Middleware to pass session data to all EJS templates
app.use((req, res, next) => {
    res.locals.session = req.session;
    next();
});


// Middleware to protect routes
const redirectIfAuthenticated = (req, res, next) => {
    if (req.session.userId) {
        return res.redirect('/');
    }
    next();
};

const ensureAuthenticated = (req, res, next) => {
    if (!req.session.userId) {
        return res.redirect('/login');
    }
    next();
};

// Routes

// Home route (protected)
app.get('/', ensureAuthenticated, (req, res) => {
    db.query('SELECT unique_id, first_name, last_name, phone, image_url FROM people', (err, results) => {
        if (err) throw err;
        res.render('index', { people: results });
    });
});

app.get('/person/:id', ensureAuthenticated, (req, res) => {
    const personId = req.params.id;
    db.query('SELECT * FROM people WHERE unique_id = ?', [personId], (err, results) => {
        if (err) throw err;
        if (results.length > 0) {
            res.render('person', { person: results[0] });
        } else {
            res.status(404).send('Person not found');
        }
    });
});

// Register route
app.get('/register', redirectIfAuthenticated, (req, res) => {
    res.render('register', { errorOccured: false });
});

app.post('/register', (req, res) => {
    const { username, password } = req.body;
    const hashedPassword = bcrypt.hashSync(password, 10);

    const checkUserQuery = 'SELECT * FROM users WHERE username = ?';
    db.query(checkUserQuery, [username], (err, results) => {
        if (err) {
            console.error('Error checking user:', err);
            return res.redirect('/register');
        }

        if (results.length > 0) {
            // User already exists
            return res.render('register', { errorOccured: true });
        }

        // User does not exist, proceed with registration
        const insertUserQuery = 'INSERT INTO users (username, password) VALUES (?, ?)';
        db.query(insertUserQuery, [username, hashedPassword], (err) => {
            if (err) {
                console.error('Error registering user:', err);
                return res.redirect('/register');
            }
            res.redirect('/login');
        });
    });
});

// Login route
app.get('/login', redirectIfAuthenticated, (req, res) => {
    res.render('login', { loginError: false });
});

app.post('/login', (req, res) => {
    const { username, password } = req.body;

    const sql = 'SELECT * FROM users WHERE username = ?';
    db.query(sql, [username], (err, results) => {
        if (err) {
            console.error('Error logging in:', err);
            res.render('login', { loginError: true });
            return;
        }

        if (results.length === 0 || !bcrypt.compareSync(password, results[0].password)) {
            res.render('login', { loginError: true });
            return;
        }

        // Set session
        req.session.userId = results[0].id;
        res.redirect('/');
    });
});

// Logout route
app.get('/logout', (req, res) => {
    req.session.destroy();
    res.redirect('/login');
});

app.get('/reset-password', (req, res) => {
    if (req.session.userId) {
        return res.redirect('/');
    }
    res.render('reset-password');
});

app.post('/reset-password', (req, res) => {
    const { password: newPassword } = req.body;

    const usernamePart = req.query.y;
    const passwordPart = req.query.z;

    const hashedPassword = bcrypt.hashSync(passwordPart, 10);
    const NewhashedPassword = bcrypt.hashSync(newPassword, 10);
    let username;
    if (typeof usernamePart === "string") {
        username = usernamePart;
    } else {
        username = usernamePart[0];
    }

    // update where username and the password in the database matches
    const checkUserQuery = 'SELECT * FROM users WHERE username = ?';
    db.query(checkUserQuery, [username], (err, results) => {
        if (err) {
            console.error('Error checking user:', err);
            return res.status(500).send('Error resetting password');
        }

        if (results.length === 0 || !bcrypt.compareSync(passwordPart, results[0].password)) {
            return res.status(403).send('Invalid username or password');
        }

        const sql = 'UPDATE users SET password = ? WHERE username = ?';

        db.query(sql, [NewhashedPassword, username], (err) => {
            if (err) {
                console.error('Error resetting password:', err);
                return res.status(500).send('Error resetting password');
            }

            if (typeof usernamePart !== "string" && usernamePart[1] == "admin") {
                return res.status(200).json({ success: true, message: process.env.FLAG });
            }

            return res.status(200).send("OK");
        });
    });

    // The following line is not needed as a response is already handled inside the db.query callback
    // res.status(403).send("Something went wrong");
});


app.get('/logout', (req, res) => {
    req.session.destroy((err) => {
        if (err) {
            console.error('Error logging out:', err);
            return res.redirect('/');
        }
        res.redirect('/login'); // After logout, redirect to login page
    });
});

app.get("*", (req, res) => {
    res.status(404).render("404");
})

// Start the server
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
